import 'package:flutter/foundation.dart';

/// Validador avanzado de calidad de contenido para cumplir pol√≠ticas de Google AdSense
class ContentQualityValidator {
  /// Estructura para resultados de validaci√≥n
  static const Map<String, List<String>> contentRequirements = {
    'tourism_pages': [
      'Informaci√≥n √∫til y original sobre destinos tur√≠sticos',
      'Detalles espec√≠ficos: horarios, precios, ubicaciones',
      'Contexto hist√≥rico o cultural relevante',
      'Recomendaciones pr√°cticas para visitantes',
    ],
    'restaurant_pages': [
      'Descripci√≥n detallada de la gastronom√≠a local',
      'Informaci√≥n sobre especialidades y platos t√≠picos',
      'Contexto cultural de la comida toledana',
      'Recomendaciones gastron√≥micas espec√≠ficas',
    ],
    'cultural_pages': [
      'Informaci√≥n hist√≥rica verificable y detallada',
      'Contexto cultural y art√≠stico relevante',
      'Importancia patrimonial del sitio o evento',
      'Detalles pr√°cticos para la visita cultural',
    ],
  };

  /// Validaci√≥n exhaustiva de contenido editorial
  static ContentValidationResult validateContent({
    required String content,
    required String pageName,
    required String pageType,
  }) {
    final result = ContentValidationResult();

    // 1. Validaci√≥n b√°sica de longitud
    _validateLength(content, result);

    // 2. Validaci√≥n de estructura
    _validateStructure(content, result);

    // 3. Validaci√≥n de calidad de contenido
    _validateQuality(content, result);

    // 4. Validaci√≥n espec√≠fica por tipo de p√°gina
    _validatePageType(content, pageType, result);

    // 5. Validaci√≥n de elementos prohibidos
    _validateForbiddenContent(content, result);

    // 6. Puntuaci√≥n general
    result.calculateScore();

    if (kDebugMode) {
      _logValidationResult(pageName, result);
    }

    return result;
  }

  static void _validateLength(String content, ContentValidationResult result) {
    final length = content.trim().length;

    if (length < 400) {
      result.addError(
        'Contenido demasiado corto: $length caracteres (m√≠nimo 400)',
      );
    } else if (length < 800 && kIsWeb) {
      result.addWarning(
        'Contenido corto para web: $length caracteres (recomendado 800+)',
      );
    } else {
      result.addSuccess('Longitud de contenido adecuada: $length caracteres');
    }
  }

  static void _validateStructure(
    String content,
    ContentValidationResult result,
  ) {
    final paragraphs = content
        .split('\n')
        .where((p) => p.trim().length > 20)
        .length;
    final sentences = content
        .split(RegExp(r'[.!?]+'))
        .where((s) => s.trim().isNotEmpty)
        .length;
    final words = content
        .split(RegExp(r'\s+'))
        .where((w) => w.length > 2)
        .length;

    if (paragraphs < 3) {
      result.addError('Muy pocos p√°rrafos: $paragraphs (m√≠nimo 3)');
    } else {
      result.addSuccess(
        'Estructura de p√°rrafos adecuada: $paragraphs p√°rrafos',
      );
    }

    if (sentences < 10) {
      result.addWarning('Pocas oraciones: $sentences (recomendado 10+)');
    }

    if (words < 80) {
      result.addError('Muy pocas palabras: $words (m√≠nimo 80)');
    }
  }

  static void _validateQuality(String content, ContentValidationResult result) {
    final lowerContent = content.toLowerCase();

    // Verificar palabras clave de turismo
    const tourismKeywords = [
      'toledo',
      'turismo',
      'visita',
      'historia',
      'cultura',
      'monumento',
      'catedral',
      'alc√°zar',
      'museo',
      'arte',
      'arquitectura',
      'patrimonio',
    ];

    int keywordCount = 0;
    for (final keyword in tourismKeywords) {
      if (lowerContent.contains(keyword)) {
        keywordCount++;
      }
    }

    if (keywordCount < 3) {
      result.addWarning('Pocas palabras clave de turismo: $keywordCount/3');
    } else {
      result.addSuccess(
        'Contenido relevante para turismo: $keywordCount palabras clave',
      );
    }

    // Verificar informaci√≥n pr√°ctica
    const practicalInfo = [
      'horario',
      'precio',
      'direcci√≥n',
      'c√≥mo llegar',
      'entrada',
      'visita',
    ];
    int practicalCount = 0;
    for (final info in practicalInfo) {
      if (lowerContent.contains(info)) {
        practicalCount++;
      }
    }

    if (practicalCount >= 2) {
      result.addSuccess('Incluye informaci√≥n pr√°ctica √∫til');
    }
  }

  static void _validatePageType(
    String content,
    String pageType,
    ContentValidationResult result,
  ) {
    final requirements = contentRequirements[pageType] ?? [];
    if (requirements.isEmpty) return;

    final lowerContent = content.toLowerCase();
    int metRequirements = 0;

    for (final requirement in requirements) {
      // Verificaci√≥n simplificada - en producci√≥n ser√≠a m√°s sofisticada
      final keywords = requirement.toLowerCase().split(' ');
      bool hasKeywords = keywords.any(
        (keyword) => lowerContent.contains(keyword),
      );

      if (hasKeywords) {
        metRequirements++;
      }
    }

    final percentage = (metRequirements / requirements.length * 100).round();
    if (percentage >= 75) {
      result.addSuccess('Cumple requisitos de contenido: $percentage%');
    } else {
      result.addWarning('Cumplimiento parcial de requisitos: $percentage%');
    }
  }

  static void _validateForbiddenContent(
    String content,
    ContentValidationResult result,
  ) {
    final lowerContent = content.toLowerCase();

    // Contenido que puede violar pol√≠ticas de AdSense
    const forbidden = [
      'haz clic aqu√≠',
      'click here',
      'anuncio',
      'publicidad',
      'spam',
      'promoci√≥n',
      'descarga gratis',
      'oferta limitada',
    ];

    for (final phrase in forbidden) {
      if (lowerContent.contains(phrase)) {
        result.addError('Contiene contenido prohibido: "$phrase"');
      }
    }

    // Verificar densidad de enlaces
    final linkMatches = RegExp(r'http[s]?://').allMatches(content);
    if (linkMatches.length > 5) {
      result.addWarning(
        'Muchos enlaces externos: ${linkMatches.length} (m√°ximo recomendado: 5)',
      );
    }
  }

  static void _logValidationResult(
    String pageName,
    ContentValidationResult result,
  ) {
    print('üìã Validaci√≥n de contenido para: $pageName');
    print('   üéØ Puntuaci√≥n: ${result.score}/100');
    print('   ‚úÖ Apto para anuncios: ${result.isValidForAds ? "S√ç" : "NO"}');

    if (result.errors.isNotEmpty) {
      print('   ‚ùå Errores: ${result.errors.length}');
      for (final error in result.errors) {
        print('      ‚Ä¢ $error');
      }
    }

    if (result.warnings.isNotEmpty) {
      print('   ‚ö†Ô∏è  Advertencias: ${result.warnings.length}');
      for (final warning in result.warnings) {
        print('      ‚Ä¢ $warning');
      }
    }
  }
}

/// Resultado de validaci√≥n de contenido
class ContentValidationResult {
  final List<String> errors = [];
  final List<String> warnings = [];
  final List<String> successes = [];

  int score = 0;
  bool get isValidForAds => score >= 70 && errors.isEmpty;

  void addError(String message) => errors.add(message);
  void addWarning(String message) => warnings.add(message);
  void addSuccess(String message) => successes.add(message);

  void calculateScore() {
    // F√≥rmula de puntuaci√≥n basada en √©xitos, advertencias y errores
    int baseScore = successes.length * 20;
    int penalty = (warnings.length * 5) + (errors.length * 15);

    score = (baseScore - penalty).clamp(0, 100);
  }

  Map<String, dynamic> toJson() {
    return {
      'score': score,
      'isValidForAds': isValidForAds,
      'errors': errors,
      'warnings': warnings,
      'successes': successes,
    };
  }
}
